import cv2
import pytesseract
import pandas as pd
import re
import os

# Preprocessing function
def preprocess_image(image_path):
    image = cv2.imread(image_path)
    if image is None:
        raise FileNotFoundError(f"Image file not found at path: {image_path}")
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)
    threshold_image = cv2.adaptiveThreshold(blurred_image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
    return threshold_image

# OCR function
def extract_text(image_path):
    processed_image = preprocess_image(image_path)
    text = pytesseract.image_to_string(processed_image)
    return text

# Parsing function for results
def parse_results(text):
    lines = text.split('\n')
    results_data = []
    position = None
    for line in lines:
        if re.match(r'\d+', line):
            position = int(re.match(r'\d+', line).group())
        if position and line.strip() and not line.startswith(str(position)):
            player_data = re.split(r'\s+', line.strip())
            if player_data and player_data[-1].isdigit():
                player_name = ' '.join(player_data[:-1])
                finishes = int(player_data[-1])
                results_data.append((position, player_name, finishes))
            else:
                player_name = ' '.join(player_data)
                finishes = 0
                results_data.append((position, player_name, finishes))
    return results_data

# Function to find the team by slot number
def find_team_by_slot(slot, slot_list):
    team = slot_list.get(slot)
    return team if team else 'Unknown'

# Function to calculate placement points
def calculate_placement_points(position):
    points_table = {1: 10, 2: 6, 3: 5, 4: 4, 5: 3, 6: 2, 7: 1}
    return points_table.get(position, 0)

# Main function
def main():
    lobby_image_paths = input("Enter the paths for the lobby screenshots separated by commas: ").split(',')
    results_image_paths = input("Enter the paths for the results screenshots separated by commas: ").split(',')
    slot_list_path = input("Enter the path for the predefined slot list CSV: ")

    # Aggregate lobby data from multiple screenshots
    lobby_data = {}
    for lobby_image_path in lobby_image_paths:
        lobby_text = extract_text(lobby_image_path.strip())
        lobby_lines = lobby_text.split('\n')
        current_slot = None
        for line in lobby_lines:
            slot_match = re.match(r'Slot (\d+):', line)
            if slot_match:
                current_slot = int(slot_match.group(1))
                lobby_data[current_slot] = []
            elif current_slot and line.strip():
                player_name = line.strip()
                lobby_data[current_slot].append(player_name)

    results_text = ''
    for results_image_path in results_image_paths:
        results_text += extract_text(results_image_path.strip()) + '\n'
    
    slot_list_df = pd.read_csv(slot_list_path)
    print("Columns in slot list CSV:", slot_list_df.columns)  # Debugging line to print column names

    # Check for 'Slot' and 'Team' columns
    if 'Slot' not in slot_list_df.columns or 'Team' not in slot_list_df.columns:
        raise KeyError("The slot list CSV must contain 'Slot' and 'Team' columns.")
    
    slot_list = dict(zip(slot_list_df['Slot'], slot_list_df['Team']))

    results_data = parse_results(results_text)
    
    identified_teams = []
    team_stats = {}

    for position, player, finishes in results_data:
        slot_found = False
        for slot, players in lobby_data.items():
            if player in players:
                team_name = find_team_by_slot(slot, slot_list)
                placement_points = calculate_placement_points(position)
                if team_name not in team_stats:
                    team_stats[team_name] = {
                        'Win': 1 if position == 1 else 0,
                        'Matches': 1,
                        'Finish Points': finishes,
                        'Placement Points': placement_points,
                        'Total Points': finishes + placement_points,
                        'Group': 'G1',
                        'Slot Number': slot
                    }
                else:
                    team_stats[team_name]['Win'] += 1 if position == 1 else 0
                    team_stats[team_name]['Matches'] += 1
                    team_stats[team_name]['Finish Points'] += finishes
                    team_stats[team_name]['Placement Points'] += placement_points
                    team_stats[team_name]['Total Points'] += finishes + placement_points
                identified_teams.append((player, team_name, slot, position, finishes))
                slot_found = True
                break
        if not slot_found:
            identified_teams.append((player, 'Unknown', 'Unknown', position, finishes))

    df_teams = pd.DataFrame.from_dict(team_stats, orient='index')
    df_teams.reset_index(inplace=True)
    df_teams.rename(columns={'index': 'Team Name'}, inplace=True)
    
    output_directory = 'data'
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)
    output_path = os.path.join(output_directory, 'identified_teams.csv')
    df_teams.to_csv(output_path, index=False)
    
    print(f"Identified teams saved to {output_path}")
    print(df_teams)

if __name__ == "__main__":
    main()
